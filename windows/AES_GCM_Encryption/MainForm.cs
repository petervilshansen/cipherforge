// File: AES_GCM_Encryption/MainForm.cs
// This is the main form for the GUI application.
using System;
using System.Drawing;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace AES_GCM_Encryption
{
    public partial class MainForm : Form
    {
        public MainForm()
        {
            InitializeComponent(); // This call is generated by the designer
            this.Text = "AES-GCM Encryption/Decryption";
            this.StartPosition = FormStartPosition.CenterScreen;
            this.Size = new Size(800, 600);
            this.BackColor = ColorTranslator.FromHtml("#f4f4f4"); // Match body background

            // Fallback for PlaceholderText if not supported (e.g., older .NET Framework)
            if (tbInput.PlaceholderText == null)
            {
                tbInput.Text = "Enter text to encrypt/decrypt";
                tbInput.ForeColor = SystemColors.GrayText;
                tbInput.GotFocus += (s, e) => { if (tbInput.Text == "Enter text to encrypt/decrypt") { tbInput.Text = ""; tbInput.ForeColor = SystemColors.WindowText; } };
                tbInput.LostFocus += (s, e) => { if (string.IsNullOrWhiteSpace(tbInput.Text)) { tbInput.Text = "Enter text to encrypt/decrypt"; tbInput.ForeColor = SystemColors.GrayText; } };
            }
            if (tbOutput.PlaceholderText == null)
            {
                tbOutput.Text = "Result will appear here";
                tbOutput.ForeColor = SystemColors.GrayText;
            }

        }

        private async void btnEncrypt_Click(object sender, EventArgs e)
        {
            string inputText = tbInput.Text.Trim();
            if (string.IsNullOrEmpty(inputText) || inputText == "Enter text to encrypt/decrypt")
            {
                MessageBox.Show("Please enter some text to encrypt.", "Input Required", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            try
            {
                // Run encryption on a separate thread to keep UI responsive
                var result = await Task.Run(() => CipherForge.Encrypt(inputText));
                tbOutput.Text = result.asciiArmored;
                tbPassword.Text = result.password;
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Encryption failed: {ex.Message}", "Encryption Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private async void btnDecrypt_Click(object sender, EventArgs e)
        {
            string inputText = tbInput.Text.Trim();
            if (string.IsNullOrEmpty(inputText) || inputText == "Enter text to decrypt/decrypt")
            {
                MessageBox.Show("Please enter some text to decrypt.", "Input Required", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            string password = PromptForPassword();
            if (string.IsNullOrEmpty(password))
            {
                MessageBox.Show("Password is required for decryption.", "Password Required", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            try
            {
                // Run decryption on a separate thread to keep UI responsive
                string decryptedText = await Task.Run(() => CipherForge.Decrypt(inputText, password));
                tbOutput.Text = decryptedText;
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Decryption failed: {ex.Message}", "Decryption Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        // Custom prompt for password instead of alert()
        private string PromptForPassword()
        {
            using (PasswordPromptForm passwordPromptForm = new PasswordPromptForm())
            {
                DialogResult result = passwordPromptForm.ShowDialog(this);
                if (result == DialogResult.OK)
                {
                    return passwordPromptForm.EnteredPassword;
                }
                else
                {
                    return String.Empty;
                }
            }
        }

        private void InitializeComponent()
        {
            tbInput = new TextBox();
            tbOutput = new TextBox();
            btnEncrypt = new Button();
            btnDecrypt = new Button();
            tbPassword = new TextBox();
            btnCopyPassword = new Button();
            lblTitle = new Label();
            button1 = new Button();
            SuspendLayout();
            // 
            // tbInput
            // 
            tbInput.Font = new Font("Consolas", 9F);
            tbInput.Location = new Point(41, 77);
            tbInput.MaxLength = 999999;
            tbInput.Multiline = true;
            tbInput.Name = "tbInput";
            tbInput.PlaceholderText = "(Enter text to encrypt or decrypt here...)";
            tbInput.Size = new Size(690, 181);
            tbInput.TabIndex = 1;
            // 
            // tbOutput
            // 
            tbOutput.Font = new Font("Consolas", 9F, FontStyle.Regular, GraphicsUnit.Point, 0);
            tbOutput.Location = new Point(41, 320);
            tbOutput.MaxLength = 999999;
            tbOutput.Multiline = true;
            tbOutput.Name = "tbOutput";
            tbOutput.PlaceholderText = "(Encrypted or decrypted output will go here...)";
            tbOutput.ReadOnly = true;
            tbOutput.Size = new Size(690, 181);
            tbOutput.TabIndex = 4;
            // 
            // btnEncrypt
            // 
            btnEncrypt.Location = new Point(87, 264);
            btnEncrypt.Name = "btnEncrypt";
            btnEncrypt.Size = new Size(125, 35);
            btnEncrypt.TabIndex = 2;
            btnEncrypt.Text = "Encrypt";
            btnEncrypt.UseVisualStyleBackColor = true;
            btnEncrypt.Click += btnEncrypt_Click;
            // 
            // btnDecrypt
            // 
            btnDecrypt.Location = new Point(534, 264);
            btnDecrypt.Name = "btnDecrypt";
            btnDecrypt.Size = new Size(125, 35);
            btnDecrypt.TabIndex = 3;
            btnDecrypt.Text = "Decrypt";
            btnDecrypt.UseVisualStyleBackColor = true;
            btnDecrypt.Click += btnDecrypt_Click;
            // 
            // tbPassword
            // 
            tbPassword.Enabled = false;
            tbPassword.Location = new Point(41, 516);
            tbPassword.Name = "tbPassword";
            tbPassword.PlaceholderText = "(Auto-generated password will be visible here after encryption.)";
            tbPassword.ReadOnly = true;
            tbPassword.Size = new Size(559, 23);
            tbPassword.TabIndex = 0;
            tbPassword.TextAlign = HorizontalAlignment.Center;
            // 
            // btnCopyPassword
            // 
            btnCopyPassword.Location = new Point(606, 516);
            btnCopyPassword.Name = "btnCopyPassword";
            btnCopyPassword.Size = new Size(125, 25);
            btnCopyPassword.TabIndex = 5;
            btnCopyPassword.Text = "Copy password";
            btnCopyPassword.UseVisualStyleBackColor = true;
            btnCopyPassword.Click += btnCopyPassword_Click;
            // 
            // lblTitle
            // 
            lblTitle.AutoSize = true;
            lblTitle.Font = new Font("Segoe UI", 28F);
            lblTitle.Location = new Point(78, 9);
            lblTitle.Name = "lblTitle";
            lblTitle.Size = new Size(572, 51);
            lblTitle.TabIndex = 7;
            lblTitle.Text = "AES-GCM Encryption/Decryption";
            // 
            // button1
            // 
            button1.Location = new Point(696, 26);
            button1.Name = "button1";
            button1.Size = new Size(35, 30);
            button1.TabIndex = 6;
            button1.Text = "?";
            button1.UseVisualStyleBackColor = true;
            button1.Click += button1_Click;
            // 
            // MainForm
            // 
            AutoScaleDimensions = new SizeF(7F, 15F);
            AutoScaleMode = AutoScaleMode.Font;
            ClientSize = new Size(784, 561);
            Controls.Add(button1);
            Controls.Add(lblTitle);
            Controls.Add(btnCopyPassword);
            Controls.Add(tbPassword);
            Controls.Add(btnDecrypt);
            Controls.Add(btnEncrypt);
            Controls.Add(tbOutput);
            Controls.Add(tbInput);
            Name = "MainForm";
            Text = "AES-GCM Encryption/Decryption";
            ResumeLayout(false);
            PerformLayout();

        }

        private TextBox tbInput;
        private Button btnEncrypt;
        private Button btnDecrypt;
        private TextBox tbPassword;
        private Button btnCopyPassword;
        private Label lblTitle;
        private Button button1;
        private TextBox tbOutput;

        private void btnCopyPassword_Click(object sender, EventArgs e)
        {
            if (tbPassword.Text != null)
            {
                Clipboard.SetText(tbPassword.Text);
            }
        }

        private void button1_Click(object sender, EventArgs e)
        {
            string title = "About This Encryption Program";
            string description =
                "This program provides AES-GCM encryption and decryption for text. It allows you to securely encrypt your messages, generating a strong, random password for each encryption. You can then use this password to decrypt the text later.\n\n" +
                "Key Features & Cryptographic Details:\n\n" +
                "* AES-GCM 256-bit Encryption: Utilizes the Advanced Encryption Standard (AES) in Galois/Counter Mode (GCM), a robust and modern authenticated encryption algorithm. AES-GCM provides both confidentiality (encryption) and integrity/authenticity (ensuring data hasn't been tampered with). The key size used is 256 bits.\n\n" +
                "* Secure Key Derivation (PBKDF2): The encryption key is securely derived from your password using PBKDF2 (Password-Based Key Derivation Function 2) with a high number of iterations. This makes it significantly harder for attackers to brute-force or guess your password. The number of PBKDF2 iterations is set to 1,000,000.\n\n" +
                "* Random Nonce (IV): Each encryption uses a unique, randomly generated Nonce (Initialization Vector). This is crucial for security, preventing identical plaintexts from producing identical ciphertexts and enhancing the cryptographic strength of AES-GCM.\n\n" +
                "* Random Salt: A unique, randomly generated Salt is used during key derivation. The salt ensures that even if two users choose the same weak password, their derived keys will be different, further protecting against pre-computed attacks like rainbow tables.\n\n" +
                "* Authentication Tag: AES-GCM produces an authentication tag alongside the ciphertext. This tag is verified during decryption to ensure that the encrypted data and its associated parameters have not been altered. If any tampering is detected, decryption will fail, protecting against malicious modifications.\n\n" +
                "* Easy Copy/Paste: Simplifies handling of encrypted text and passwords.\n\n" +
                "Use it to protect sensitive information or ensure privacy in your communications with confidence in its underlying cryptographic principles.";

            MessageBox.Show(description, title, MessageBoxButtons.OK, MessageBoxIcon.Information);
        }
    }

    // File: AES_GCM_Encryption/MainForm.Designer.cs
    // This file is auto-generated by Visual Studio when designing the form.
    // It defines the layout and properties of the UI components.
    // It's usually a partial class of MainForm.
    public partial class MainForm
    {

        #region Windows Form Designer generated code

        #endregion
    }
}
