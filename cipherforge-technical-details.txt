
AES-GCM ENCRYPTED DATA FORMAT AND PROCESSING GUIDE

Overview:

This system encrypts plaintext using AES-GCM and derives encryption keys using PBKDF2. The output is formatted with ASCII-armored tags for easy storage and transmission. The encryption method ensures both confidentiality and authentication.

Encrypted Data Structure:

An encrypted message consists of multiple components:

Component        | Size           | Description
---------------- | -------------- | -----------
Salt             | 16 bytes       | Randomly generated salt used for PBKDF2 key derivation.
Nonce (IV)       | 12 bytes       | Randomly generated initialization vector for AES-GCM encryption.
Ciphertext       | Variable       | The encrypted message, including the authentication tag.
Base64 Encoding  | Entire payload | Ensures safe transmission/storage by converting binary to text.
ASCII Armor Tags | N/A            | Clear delimiters for wrapping and identifying encrypted data.

Final ASCII Armored Format Example:

-----BEGIN AES-GCM ENCRYPTED DATA-----
c3NhbHRzbm9uY2VjaXBoZXJ0ZXh0
-----END AES-GCM ENCRYPTED DATA-----

Where c3NhbHRzbm9uY2VjaXBoZXJ0ZXh0 represents the Base64-encoded encrypted data.

Encryption Process:

1. Password Handling:
   - A user-provided password may be used.
   - If no password is provided, the system generates a secure password:
     - 43-character password with high entropy.
     - Uses a cryptographically secure random generator.
     - Contains uppercase, lowercase, numbers, and special characters.

2. Salt Generation:
   - A 16-byte salt is randomly generated.
   - Salt prevents the same password from producing the same encryption key.

3. Key Derivation (PBKDF2):
   - The password undergoes PBKDF2 key derivation using:
     - SHA-256 hashing algorithm
     - 1,000,000 iterations for strong security
     - Salt from the previous step
   - The resulting AES-GCM key is 256 bits (32 bytes) long.

4. Nonce (IV) Generation:
   - A 12-byte nonce is generated randomly.
   - This nonce must never be reused for security reasons.

5. Plaintext Encoding:
   - The plaintext input is converted into a Uint8Array using TextEncoder.

6. AES-GCM Encryption:
   - The system encrypts plaintext using:
     - AES-GCM mode
     - Derived key from the previous step
     - Generated nonce
   - AES-GCM ensures confidentiality and authentication.
   - The authentication tag is automatically included in the ciphertext.

7. Data Assembly:
   - The final encrypted payload is assembled as follows:
     [16 bytes salt] + [12 bytes nonce] + [Ciphertext with authentication tag]
   - The entire binary payload is Base64-encoded.

8. ASCII Armoring:
   - The Base64 ciphertext is wrapped in ASCII armor:
     -----BEGIN AES-GCM ENCRYPTED DATA-----
     <Base64_encoded_ciphertext>
     -----END AES-GCM ENCRYPTED DATA-----

9. Output:
   - The final output consists of:
     - ASCII-armored encrypted text
     - Encryption password (if auto-generated)

Decryption Process:

1. Extract ASCII Armored Data:
   - The input encrypted data must include:
     -----BEGIN AES-GCM ENCRYPTED DATA-----
     -----END AES-GCM ENCRYPTED DATA-----
   - Missing these tags will result in an error.

2. Base64 Decoding:
   - The Base64-encoded encrypted data is decoded into binary.

3. Extract Components:
   - The extracted components include:
     [16 bytes salt] + [12 bytes nonce] + [Ciphertext with authentication tag]
   - Salt is used to rederive the encryption key.
   - Nonce is required for decryption.
   - Ciphertext contains the encrypted data.

4. Key Derivation:
   - The provided password undergoes PBKDF2 key derivation using the extracted salt.

5. AES-GCM Decryption:
   - Using the derived key and nonce, the system attempts AES-GCM decryption.
   - If decryption fails:
     - The password is incorrect, or
     - The data has been corrupted.

6. Plaintext Output:
   - The decrypted data is converted back into text using TextDecoder.

Security Considerations:

- Strong passwords should be used, either provided by users or generated by the system.
- Salt must be stored alongside encrypted data for key derivation.
- Nonce must be unique for every encryption operation.
- AES-GCM authentication prevents unauthorized modification of encrypted data.
- Sensitive data should be cleared from memory as soon as possible.

Implementation Guidelines:

To implement this system from scratch:

1. Use a cryptographically secure random generator for salt and nonce.
2. Apply PBKDF2 with SHA-256 and a high iteration count for key derivation.
3. Use AES-GCM for encryption and decryption.
4. Wrap encrypted data with ASCII armor for easy storage and transfer.
5. Base64 encode and decode encrypted data for compatibility.
6. Implement proper validation checks for password length and data format.

This ASCII-formatted documentation provides an exhaustive, step-by-step guide on the encryption and decryption process. It ensures a developer can write the system from scratch without referring to the original code.
